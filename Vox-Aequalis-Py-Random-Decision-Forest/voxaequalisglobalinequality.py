# -*- coding: utf-8 -*-
"""VoxAequalisGlobalInequality

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Yftrfv0cTPSBWxkSFNwtpDPJuxrkfc0W
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

income_df = pd.read_csv('global_income_inequality.csv')

income_df_clean = income_df.dropna(subset=['Gini Index', 'Population', 'Average Income (USD)',
                                            'Top 10% Income Share (%)', 'Bottom 10% Income Share (%)'])

X_income = income_df_clean[['Population', 'Average Income (USD)', 'Top 10% Income Share (%)',
                            'Bottom 10% Income Share (%)']]
y_income = income_df_clean['Gini Index']

X_train, X_test, y_train, y_test = train_test_split(X_income, y_income, test_size=0.2, random_state=42)

model_income = RandomForestRegressor(random_state=42)
model_income.fit(X_train, y_train)

y_pred_income = model_income.predict(X_test)
mse_income = mean_squared_error(y_test, y_pred_income)
r2_income = r2_score(y_test, y_pred_income)

print("Mean Squared Error:", mse_income)
print("RÂ² Score:", r2_income)

feature_importance = pd.Series(model_income.feature_importances_, index=X_income.columns).sort_values(ascending=False)
print("\nFeature Importances:\n", feature_importance)

plt.figure(figsize=(8, 5))
sns.scatterplot(x=y_test, y=y_pred_income)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--')
plt.xlabel('Actual Gini Index')
plt.ylabel('Predicted Gini Index')
plt.title('Actual vs Predicted Gini Index')
plt.grid(True)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 5))
sns.histplot(income_df_clean['Gini Index'], kde=True, bins=30, color='purple')
plt.title("Distribution of Gini Index")
plt.xlabel("Gini Index")
plt.ylabel("Frequency")
plt.tight_layout()
plt.show()

plt.figure(figsize=(10, 6))
sns.boxplot(x='Income Group', y='Gini Index', data=income_df_clean)
plt.title("Gini Index by Income Group")
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(8, 6))
sns.heatmap(income_df_clean[['Population', 'Average Income (USD)',
                              'Top 10% Income Share (%)', 'Bottom 10% Income Share (%)',
                              'Gini Index']].corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation with Gini Index")
plt.tight_layout()
plt.show()