# -*- coding: utf-8 -*-
"""laborForce.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q0JimmJJdmkDZTNNaH8k-ueoe7neLJ59
"""

""" DATA SET LINK: https://rshiny.ilo.org/dataexplorer04/?lang=en&segment=indicator&id=EAP_TEAP_SEX_AGE_MTS_NB_A """

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np
from statsmodels.tsa.arima.model import ARIMA

df = pd.read_csv("labourForce.csv")

plt.figure(figsize=(8, 5))
sns.histplot(df['obs_value'], kde=True, bins=30)
plt.title("Distribution of Labour Force %")
plt.xlabel("Labour Force %")
plt.ylabel("Count")
plt.show()

plt.figure(figsize=(8, 5))
sns.boxplot(x='gender', y='obs_value', data=df)
plt.title("Labour Force % by Gender")
plt.show()

sample_countries = df['country'].unique()[:20]
for country in sample_countries:
    subset = df[df['country'] == country]
    sns.lineplot(data=subset, x='time', y='obs_value', hue='gender')
    plt.title(f"Labour Force Trend in {country}")
    plt.xticks(rotation=45)
    plt.show()

X = df[['country', 'gender', 'time']]
y = df['obs_value']

print(df['time'].isna().sum())

print(f"X shape: {X.shape}")
print(f"y shape: {y.shape}")

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

categorical_features = ['country', 'gender']
numeric_features = ['time']

preprocessor = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features),
        ('num', 'passthrough', numeric_features)
    ]
)

model = Pipeline(steps=[
    ('preprocessor', preprocessor),
    ('regressor', RandomForestRegressor(n_estimators=100, random_state=42))
])

model.fit(X_train, y_train)

y_pred = model.predict(X_test)

mae = mean_absolute_error(y_test, y_pred)
rmse = np.sqrt(mean_squared_error(y_test, y_pred))
r2 = r2_score(y_test, y_pred)

print(f"MAE: {mae:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

plt.scatter(y_test, y_pred, alpha=0.5)
plt.xlabel("Actual Labour Force %")
plt.ylabel("Predicted Labour Force %")
plt.title("Actual vs Predicted Labour Force")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red')
plt.show()

ohe = model.named_steps['preprocessor'].named_transformers_['cat']
encoded_features = ohe.get_feature_names_out(['country', 'gender'])
all_features = np.append(encoded_features, ['time'])

importances = model.named_steps['regressor'].feature_importances_
indices = np.argsort(importances)[-15:]  # show top 15

plt.figure(figsize=(10, 6))
plt.barh(range(len(indices)), importances[indices], align='center')
plt.yticks(range(len(indices)), [all_features[i] for i in indices])
plt.title("Top Feature Importances")
plt.xlabel("Importance Score")
plt.tight_layout()
plt.show()

sorted_idx = y_test.argsort()
plt.figure(figsize=(10, 5))
plt.plot(y_test.iloc[sorted_idx].values, label='Actual')
plt.plot(y_pred[sorted_idx], label='Predicted', alpha=0.7)
plt.title("Actual vs Predicted Labour Force %")
plt.xlabel("Sample Index")
plt.ylabel("Labour Force %")
plt.legend()
plt.tight_layout()
plt.show()

subset = df[(df['country'] == 'Philippines') & (df['gender'] == 'Female')]
subset['time'] = pd.to_datetime(subset['time'], errors='coerce').dt.to_period('Y').dt.to_timestamp()
subset = subset.sort_values('time').set_index('time')

model_arima = ARIMA(subset['obs_value'], order=(1,1,1))
model_fit = model_arima.fit()

forecast = model_fit.forecast(steps=5)
print("Forecasted Labour Force %:", forecast)

forecast_steps = 5
forecast = model_fit.forecast(steps=forecast_steps)

last_date = subset.index[-1]
forecast_index = pd.date_range(start=last_date + pd.DateOffset(years=1), periods=forecast_steps, freq='Y')

plt.figure(figsize=(10, 5))
plt.plot(subset['obs_value'], label='Actual')
plt.plot(forecast_index, forecast, label='Forecast', color='orange', marker='o')
plt.title("Labour Force Forecast with ARIMA")
plt.xlabel("Year")
plt.ylabel("Labour Force %")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()